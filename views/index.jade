doctype html
html
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title #{title}
    link(href="https://cdn.jsdelivr.net/npm/daisyui@2.6.0/dist/full.css", rel="stylesheet", type="text/css")
    script(src="https://cdn.tailwindcss.com")
  body(class="bg-black text-white font-mono h-screen flex flex-col")
    //- Header
    header(class="text-center p-4 bg-gray-900 text-lg font-bold")
      | #{title}

    //- Terminal Output
    main(id="output" class="flex-grow overflow-y-auto p-4 bg-gray-800 rounded-lg mx-4 my-4 border border-gray-700")
      div(class="text-gray-500") Welcome to the Terminal. Enter a command below.

    //- Command Input Form
    div(class="flex p-4 mx-4 bg-gray-700 rounded-lg border border-gray-600")
      input(
        id="command-input"
        type="text"
        placeholder="Enter a command"
        class="input input-bordered flex-grow bg-gray-900 text-white"
      )
      button(
        id="run-command"
        class="btn ml-2 bg-green-600 hover:bg-green-500"
        type="button"
      ) Run

    script.
      const outputDiv = document.getElementById('output');
      const commandInput = document.getElementById('command-input');
      const runCommandButton = document.getElementById('run-command');

      // Prevent form from submitting and handle AJAX request
      async function runCommand() {
        const command = commandInput.value.trim();
        if (!command) return;

        // Show the command in the terminal
        const commandLine = document.createElement('div');
        commandLine.textContent = `> ${command}`;
        commandLine.className = 'text-green-500';
        outputDiv.appendChild(commandLine);

        // Clear input
        commandInput.value = '';

        try {
          const response = await fetch('/execute', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ command }),
          });

          const result = await response.json();

          // Show output or error
          const outputLine = document.createElement('div');
          outputLine.textContent = result.output || result.error;
          outputLine.className = result.error ? 'text-red-500' : 'text-white';
          outputDiv.appendChild(outputLine);
        } catch (error) {
          const errorLine = document.createElement('div');
          errorLine.textContent = `Error: ${error.message}`;
          errorLine.className = 'text-red-500';
          outputDiv.appendChild(errorLine);
        }

        // Scroll to the bottom of the output
        outputDiv.scrollTop = outputDiv.scrollHeight;
      }

      // Attach event listener to the button
      runCommandButton.addEventListener('click', runCommand);

      // Allow pressing "Enter" to execute commands
      commandInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          runCommand();
        }
      });
